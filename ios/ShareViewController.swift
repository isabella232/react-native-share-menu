//
//  ShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 26/07/2020.
//

import MobileCoreServices
import UIKit
import Social
import RNShareMenu
import AVFoundation

class ShareViewController: SLComposeServiceViewController {
  var hostAppId: String?
  var hostAppUrlScheme: String?
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    if let hostAppId = Bundle.main.object(forInfoDictionaryKey: HOST_APP_IDENTIFIER_INFO_PLIST_KEY) as? String {
      self.hostAppId = hostAppId
    } else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
    }
    
    if let hostAppUrlScheme = Bundle.main.object(forInfoDictionaryKey: HOST_URL_SCHEME_INFO_PLIST_KEY) as? String {
      self.hostAppUrlScheme = hostAppUrlScheme
    } else {
      print("Error: \(NO_INFO_PLIST_URL_SCHEME_ERROR)")
    }
  }

    override func isContentValid() -> Bool {
        // Do validation of contentText and/or NSExtensionContext attachments here
        return true
    }

    override func didSelectPost() {
        // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
      guard let item = extensionContext?.inputItems.first as? NSExtensionItem else {
        cancelRequest()
        return
      }

      handlePost(item)
    }

    override func configurationItems() -> [Any]! {
        // To add configuration options via table cells at the bottom of the sheet, return an array of SLComposeSheetConfigurationItem here.
        return []
    }

  func handlePost(_ item: NSExtensionItem, extraData: [String:Any]? = nil) {
    guard let provider = item.attachments else {
      cancelRequest()
      return
    }

    if let data = extraData {
      storeExtraData(data)
    } else {
      removeExtraData()
    }

    if provider.first!.isText {
      storeText(withProvider: provider.first!)
    } else if provider.first!.isURL {
      storeUrl(withProvider: provider.first!)
    } else {
      storeFile(withProvider: provider)
    }
  }

  func storeExtraData(_ data: [String:Any]) {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.set(data, forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }

  func removeExtraData() {
    guard let hostAppId = self.hostAppId else {
      print("Error: \(NO_INFO_PLIST_INDENTIFIER_ERROR)")
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      print("Error: \(NO_APP_GROUP_ERROR)")
      return
    }
    userDefaults.removeObject(forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }
  
  func storeText(withProvider provider: NSItemProvider) {
    provider.loadItem(forTypeIdentifier: kUTTypeText as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let text = data as? String else {
        self.exit(withError: COULD_NOT_FIND_STRING_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      
      userDefaults.set([DATA_KEY: text, MIME_TYPE_KEY: "text/plain"],
                       forKey: USER_DEFAULTS_KEY)
      userDefaults.synchronize()
      
      self.openHostApp()
    }
  }
  
  func storeUrl(withProvider provider: NSItemProvider) {
    provider.loadItem(forTypeIdentifier: kUTTypeURL as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_URL_ERROR)
        return
      }
      guard let hostAppId = self.hostAppId else {
        self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
        return
      }
      guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
        self.exit(withError: NO_APP_GROUP_ERROR)
        return
      }
      
      userDefaults.set([DATA_KEY: url.absoluteString, MIME_TYPE_KEY: "text/plain"],
                       forKey: USER_DEFAULTS_KEY)
      userDefaults.synchronize()
      
      self.openHostApp()
    }
  }
  
  func storeFile(withProvider provider: [NSItemProvider]) {
    
    guard let hostAppId = self.hostAppId else {
      self.exit(withError: NO_INFO_PLIST_INDENTIFIER_ERROR)
      return
    }
    guard let userDefaults = UserDefaults(suiteName: "group.\(hostAppId)") else {
      self.exit(withError: NO_APP_GROUP_ERROR)
      return
    }
    guard let groupFileManagerContainer = FileManager.default
            .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId)")
    else {
      self.exit(withError: NO_APP_GROUP_ERROR)
      return
    }

    let shareDispatchGroup = DispatchGroup()
    
    var results : NSMutableArray = []
    for item in provider {
      shareDispatchGroup.enter()
      item.loadItem(forTypeIdentifier: kUTTypeData as String, options: nil) { (data, error) in
        guard (error == nil) else {
          self.exit(withError: error.debugDescription)
          return
        }
        guard let url = data as? URL else {
          self.exit(withError: COULD_NOT_FIND_IMG_ERROR)
          return
        }

        let mimeType = url.extractMimeType()
        let fileExtension = url.pathExtension
        let fileName = UUID().uuidString
        let filePath = groupFileManagerContainer
          .appendingPathComponent("\(fileName).\(fileExtension)")

        guard self.moveFileToDisk(from: url, to: filePath) else {
          self.exit(withError: COULD_NOT_SAVE_FILE_ERROR)
          return
        }

        let dict: NSMutableDictionary = [:]
        dict["url"] = filePath.absoluteString
        dict["mimeType"] = mimeType

        if mimeType.starts(with: "image") {
          guard let imageSource = CGImageSourceCreateWithURL(filePath as CFURL, nil)
                  , let imageProperties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, nil) as? [AnyHashable: Any]
                  , let pixelWidth = imageProperties[kCGImagePropertyPixelWidth as String]
                  , let pixelHeight = imageProperties[kCGImagePropertyPixelHeight as String]
                  else {
                    self.exit(withError: "Image Property Error")
                    return
                  }
          var width: CGFloat = 0, height: CGFloat = 0, orientation: Int = 0
          if let orientationNumber = imageProperties[kCGImagePropertyOrientation as String] {
            CFNumberGetValue(orientationNumber as! CFNumber, .intType, &orientation)
          }
          CFNumberGetValue(pixelWidth as! CFNumber, .cgFloatType, &width)
          CFNumberGetValue(pixelHeight as! CFNumber, .cgFloatType, &height)

          // Check orientation and flip size if required
          if orientation > 4 { let temp = width; width = height; height = temp }
      
          dict["width"] = width
          dict["height"] = height
        }
        else if mimeType.starts(with: "video") {
          if let track = try? AVURLAsset(url: url).tracks(withMediaType: AVMediaType.video) {
            if let size = try? track.first!.naturalSize {
              dict["width"] = size.width
              dict["height"] = size.height
            }
            
            var thumbBase64: String = ""
            var thumbImage: UIImage? = self.thumbnailForVideo(url: url)
            if thumbImage != nil {
                thumbImage = thumbImage?.resizeImage(CGFloat.init(500.0), opaque: false)
                let thumbImageData:NSData = thumbImage!.jpegData(compressionQuality: 0.8)! as NSData
                thumbBase64 = thumbImageData.base64EncodedString(options: .lineLength64Characters)
            }
            dict["thumbnail"] = thumbBase64
          }
        }
        
        results.add(dict)

        shareDispatchGroup.leave()

      } //item-load
    } //for loop
    
    shareDispatchGroup.wait()
    let data = self.json(from: results)

    userDefaults.set([DATA_KEY: data],
                     forKey: USER_DEFAULTS_KEY)
    userDefaults.synchronize()

    self.openHostApp()
  }
  
  func thumbnailForVideo(url: URL) -> UIImage? {
      let asset = AVAsset(url: url)
      let assetImageGenerator = AVAssetImageGenerator(asset: asset)
      assetImageGenerator.appliesPreferredTrackTransform = true

      var time = asset.duration
      time.value = min(time.value, 2)

      do {
          let imageRef = try assetImageGenerator.copyCGImage(at: time, actualTime: nil)
          return UIImage(cgImage: imageRef)
      } catch {
          print("failed to create thumbnail")
          return nil
      }
  }
  
  func json(from object:Any) -> String? {
      guard let data = try? JSONSerialization.data(withJSONObject: object, options: []) else {
          return nil
      }
      return String(data: data, encoding: String.Encoding.utf8)
  }
  
  func moveFileToDisk(from srcUrl: URL, to destUrl: URL) -> Bool {

    do {
      if FileManager.default.fileExists(atPath: destUrl.path) {
        try FileManager.default.removeItem(at: destUrl)
      }
      
      try FileManager.default.copyItem(at: srcUrl, to: destUrl)
    } catch (let error) {
      print("Could not save file from \(srcUrl) to \(destUrl): \(error)")
      return false
    }
    
    return true
  }
  
  func exit(withError error: String) {
    print("Error: \(error)")
    cancelRequest()
  }
  
  internal func openHostApp() {
    guard let urlScheme = self.hostAppUrlScheme else {
      exit(withError: NO_INFO_PLIST_URL_SCHEME_ERROR)
      return
    }
    
    let url = URL(string: urlScheme)
    let selectorOpenURL = sel_registerName("openURL:")
    var responder: UIResponder? = self
    
    while responder != nil {
      if responder?.responds(to: selectorOpenURL) == true {
        responder?.perform(selectorOpenURL, with: url)
      }
      responder = responder!.next
    }
    
    completeRequest()
  }
  
  func completeRequest() {
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    extensionContext!.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func cancelRequest() {
    extensionContext!.cancelRequest(withError: NSError())
  }

}

extension UIImage {
  func resizeImage(_ dimension: CGFloat, opaque: Bool, contentMode: UIView.ContentMode = .scaleAspectFit) -> UIImage {
      var width: CGFloat
      var height: CGFloat
      var newImage: UIImage

      let size = self.size
      let aspectRatio =  size.width/size.height

      switch contentMode {
          case .scaleAspectFit:
              if aspectRatio > 1 {                            // Landscape image
                  width = dimension
                  height = dimension / aspectRatio
              } else {                                        // Portrait image
                  height = dimension
                  width = dimension * aspectRatio
              }

      default:
          fatalError("UIIMage.resizeToFit(): FATAL: Unimplemented ContentMode")
      }

      if #available(iOS 10.0, *) {
          let renderFormat = UIGraphicsImageRendererFormat.default()
          renderFormat.opaque = opaque
          let renderer = UIGraphicsImageRenderer(size: CGSize(width: width, height: height), format: renderFormat)
          newImage = renderer.image {
              (context) in
              self.draw(in: CGRect(x: 0, y: 0, width: width, height: height))
          }
      } else {
          UIGraphicsBeginImageContextWithOptions(CGSize(width: width, height: height), opaque, 0)
              self.draw(in: CGRect(x: 0, y: 0, width: width, height: height))
              newImage = UIGraphicsGetImageFromCurrentImageContext()!
          UIGraphicsEndImageContext()
      }

      return newImage
  }
}
